
import datastore;

/*** Enums ***/

enum ClearCondition {
	NORMAL = 0,
	COLLECT_COINS = 4116396131,
	KILL_SKIPSQUEAKS = 4042480826
}

enum CourseDifficulty {
	EASY = 0,
	STANDARD = 1,
	EXPERT = 2,
	SUPER_EXPERT = 3
}

enum CourseTag {
	NONE = 0,
	STANDARD = 1,
	PUZZLE_SOLVING = 2,
	SPEEDRUN = 3,
	AUTOSCROLL = 4,
	AUTO_MARIO = 5,
	SHORT_AND_SWEET = 6,
	MULTIPLAYER_VS = 7,
	THEMED = 8,
	MUSIC = 9
}

enum CourseTheme {
	GROUND = 0,
	UNDERGROUND = 1,
	CASTLE = 2,
	AIRSHIP = 3,
	UNDERWATER = 4,
	GHOST_HOUSE = 5,
	SNOW = 6,
	DESERT = 7,
	SKY = 8,
	FOREST = 9
}

enum GameStyle {
	SMB1 = 0,
	SMB3 = 1,
	SMW = 2,
	NSMBU = 3,
	SM3DW = 4
}

enum MultiplayerStatsKeys {
	MULTIPLAYER_SCORE = 0,
	VERSUS_PLAYS = 2,
	VERSUS_WINS = 3,
	COOP_PLAYS = 10,
	COOP_WINS = 11
}

enum PlayStatsKeys {
	PLAYS = 0,
	CLEARS = 1,
	ATTEMPTS = 2,
	DEATHS = 3
}

/*** Option flags ***/
	
enum CourseOption {
	PLAY_STATS = 1,
	RATINGS = 2,
	TIME_STATS = 4,
	COMMENT_STATS = 8,
	UNK9 = 0x10,
	UNK10 = 0x20,
	UNK8 = 0x40,
	ONE_SCREEN_THUMBNAIL = 0x80,
	ENTIRE_THUMBNAIL = 0x100,
	
	ALL = 0x1FF
}

enum EventCourseOption {
	UNK3 = 1,
	GET_INFO = 2,
	
	BEST_TIME = 8,
	ONE_SCREEN_THUMBNAIL = 0x10,
	ENTIRE_THUMBNAIL = 0x20,
	UNK1 = 0x40,
	
	MEDAL_TIME = 0x100,
	GHOST = 0x200,
	
	ALL = 0x3FF
}

enum UserOption {
	PLAY_STATS = 1,
	MAKER_STATS = 2,
	UNK2 = 4,
	ENDLESS_MODE = 8,
	MULTIPLAYER_STATS = 0x10,
	BADGE_INFO = 0x20,
	UNK8 = 0x40,
	UNK9 = 0x80,
	
	UNK1 = 0x200,
	UNK7 = 0x400,
	
	UNK11 = 0x1000,
	UNK13 = 0x2000,
	
	UNK15 = 0x8000,
	
	ALL = 0xFFFF
}

/*** Method parameters ***/

struct GetCoursesParam {
	list<uint64> data_ids;
	uint32 option = 0;
}

struct GetCoursesEventParam {}

struct SearchCommentsInOrderParam {
	uint64 data_id;
	ResultRange range;
}

struct GetEventCourseGhostParam {
	uint64 data_id;
	uint32 time;
	uint8 count;
}

struct GetEventCourseHistogramParam {
	uint64 data_id;
}

struct GetUserOrCourseParam {
	string code;
	uint32 user_option = 0;
	uint32 course_option = 0;
}

struct GetUsersParam {
	list<pid> pids;
	uint32 option = 0;
}

struct RegisterUserParam {
	string name;
	UnknownStruct1 unk1;
	qbuffer unk2;
	uint8 language;
	string country;
	string device_id;
}

struct SearchCoursesPostedByParam {
	uint32 option = 0;
	ResultRange range;
	list<uint64> pids;
}

struct SearchCoursesPositiveRatedByParam {
	uint32 option = 0;
	uint32 count;
	uint64 pid;
}

struct SearchCoursesPlayedByParam {
	uint32 option = 0;
	uint32 count;
	uint64 pid;
}

struct SearchCoursesEndlessModeParam {
	uint32 option = 0;
	uint32 count;
	uint8 difficulty;
}

struct SearchCoursesFirstClearParam {
	uint64 pid;
	uint32 option = 0;
	ResultRange range;
}

struct SearchCoursesBestTimeParam {
	uint64 pid;
	uint32 option = 0;
	ResultRange range;
}

struct SearchCoursesEventParam {
	uint32 option = 0;
}

struct SearchCoursesLatestParam {
	uint32 option = 0;
	ResultRange range;
}

struct SearchUsersPlayedCourseParam {
	uint64 data_id;
	uint32 option = 0;
	uint32 count;
}

struct SearchUsersClearedCourseParam {
	uint64 data_id;
	uint32 option = 0;
	uint32 count;
}

struct SearchUsersPositiveRatedCourseParam {
	uint64 data_id;
	uint32 option = 0;
	uint32 count;
}

struct SearchCoursesPointRankingParam {
	uint32 option = 0;
	ResultRange range;
	uint8 difficulty;
	list<uint8> reject_regions = [];
}

struct SearchUsersUserPointParam {
	uint32 option = 0;
	buffer buffer;
	ResultRange range;
}

struct SyncUserProfileParam {
	string	username;
	UnknownStruct1 unk1;
	qbuffer	unk2;
	uint8	unk3;
	string	country;
	bool	unk4;
	bool	unk5;
	string	unk_guid;
	uint32	unk6;
}

struct GetWorldMapParam {
	list<string> ids;
	uint32 option = 0;
}

struct SearchWorldMapPickUpParam {
	uint32 count;
}

struct SearchWorldMapPlayedByParam {
	uint32 unk1;
	uint32 unk2;
}

/*** Other structures ***/

struct BadgeInfo {
	uint16 unk1;
	uint8 unk2;
}

struct CommentInfo {
	uint64 unk1;
	string unk2;
	uint8 unk3;
	uint8 unk4;
	uint64 unk5;
	uint16 unk6;
	uint16 unk7;
	uint8 unk8;
	uint8 unk9;
	uint16 unk10;
	bool unk11;
	bool unk12;
	datetime unk13;
	qbuffer unk14;
	string unk15;
	CommentPictureReqGetInfoWithoutHeaders picture;
	uint16 unk16;
	uint8 unk17;
}

struct DeathPositionInfo {
	uint64 data_id;
	uint16 x;
	uint16 y;
	bool is_subworld;
}

struct CommentPictureReqGetInfoWithoutHeaders {
	string url;
	uint8 data_type;
	uint32 unk1;
	buffer unk2;
	string filename;
}

struct CourseInfo {
	uint64 data_id;
	string code;
	pid owner_id;
	string name;
	string description;
	uint8 game_style;
	uint8 course_theme;
	datetime upload_time;
	uint8 difficulty;
	uint8 tag1;
	uint8 tag2;
	uint8 unk1;
	uint32 clear_condition;
	uint16 clear_condition_magnitude;
	uint16 unk2;
	qbuffer unk3;
	map<uint8, uint32> play_stats;
	map<uint8, uint32> ratings;
	map<uint8, uint32> unk4;
	CourseTimeStats time_stats;
	map<uint8, uint32> comment_stats;
	uint8 unk9;
	uint8 unk10;
	uint8 unk11;
	uint8 unk12;
	RelationObjectReqGetInfo one_screen_thumbnail;
	RelationObjectReqGetInfo entire_thumbnail;
}

struct WorldMapInfo {
	string id;
	pid owner_id;
	qbuffer unk1;
	RelationObjectReqGetInfo thumbnail;
	uint8 worlds;
	uint8 levels;
	uint8 unk2;
	datetime unk3;
	list<uint64> data_ids;
	map<uint8, uint32> unk4;
	uint32 unk5;
	uint8 unk6;
	uint8 unk7;
}

struct CourseTimeStats {
	pid first_completion;
	pid world_record_holder;
	uint32 world_record;
	uint32 upload_time;
}

struct EventCourseGhostInfo {
	RelationObjectReqGetInfo replay_file;
	uint32 time;
	pid pid;
}

struct EventCourseHistogram {
	uint64 data_id;
	uint32 unk1;
	uint32 unk2;
	uint32 unk3;
	list<uint32> values;
	map<uint8, uint32> medals;
	uint32 unk4;
}

struct EventCourseInfo {
	uint64 data_id;
	string name;
	string description;
	uint8 game_style;
	uint8 course_theme;
	bool unk1;
	bool unk2;
	datetime upload_time;
	DataStoreReqGetInfo get_info;
	map<uint8, uint32> unk3;
	UnknownStruct6 unk4;
	uint8 unk5;
	EventCourseThumbnail one_screen_thumbnail;
	EventCourseThumbnail entire_thumbnail;
	
	revision 1 {
		datetime end_time;
		uint8 unk6;
		uint32 unk7;
		uint16 unk8;
		uint16 unk9;
		uint32 best_time;
		uint32 unk10;
		uint32 medal_time;
		RelationObjectReqGetInfo personal_ghost;
	}
}

struct EventCourseStatusInfo {
	uint64 unk1;
	bool unk2;
	datetime unk3;
}

struct EventCourseThumbnail {
	string url;
	list<DataStoreKeyValue> headers;
	uint32 filesize;
	buffer root_ca_cert;
	string filename;
}

struct RelationObjectReqGetInfo {
	string url;
	uint8 data_type;
	uint32 size;
	buffer unk;
	string filename;
}

struct ReqGetInfoHeadersInfo {
	list<DataStoreKeyValue> headers;
	uint32 expiration;
}

struct SyncUserProfileResult {
	uint64 pid;
	string username;
	UnknownStruct1 unk1;
	qbuffer unk2;
	uint8 unk3;
	string country;
	uint8 unk4;
	bool unk5;
	bool unk6;
}

struct UserInfo {
	pid pid;
	string code;
	string name;
	UnknownStruct1 unk1;
	qbuffer unk2;
	string country;
	uint8 region;
	datetime last_active;
	bool unk3;
	bool unk4;
	bool unk5;
	map<uint8, uint32> play_stats;
	map<uint8, uint32> maker_stats;
	map<uint8, uint32> endless_challenge_high_scores;
	map<uint8, uint32> multiplayer_stats;
	map<uint8, uint32> unk7;
	list<BadgeInfo> badges;
	map<uint8, uint32> unk8;
	map<uint8, uint32> unk9;
	
	revision 1 {
		bool unk10;
		datetime unk11;
		bool unk12;
	}
	
	revision 2 {
		UnknownStruct3 unk13;
	}
	
	revision 3 {
		string unk14;
		map<uint8, uint32> unk15;
		bool unk16;
	}
}

/*** Unknown structures ***/

struct UnknownStruct1 {
	uint16 unk1;
	uint16 unk2;
	uint16 unk3;
	uint16 unk4;
}

struct UnknownStruct3 {
	bool unk1;
	datetime unk2;
}

struct UnknownStruct6 {
	uint64 unk1;
	uint32 unk2;
}

protocol DataStore_SMM2 : DataStore {
	method(47) register_user(RegisterUserParam param) {}

	method(48) get_users(GetUsersParam param) {
		list<UserInfo> users;
		list<result> results;
	}

	method(49) sync_user_profile(SyncUserProfileParam param) {
		SyncUserProfileResult result;
	}
	
	method(50) search_users_user_point(SearchUsersUserPointParam param) {
		list<UserInfo> users;
		list<uint32> ranks;
		bool result;
	}

	method(53) search_users_played_course(SearchUsersPlayedCourseParam param) {
		list<UserInfo> users;
	}

	method(54) search_users_cleared_course(SearchUsersClearedCourseParam param) {
		list<UserInfo> users;
	}

	method(55) search_users_positive_rated_course(SearchUsersPositiveRatedCourseParam param) {
		list<UserInfo> users;
	}

	method(59) update_last_login_time() {}

	method(65) get_username_ng_type() {
		uint8 unk;
	}
	
	method(70) get_courses(GetCoursesParam param) {
		list<CourseInfo> courses;
		list<result> results;
	}
	
	method(71) search_courses_point_ranking(SearchCoursesPointRankingParam param) {
		list<CourseInfo> courses;
		list<uint32> ranks;
		bool result;
	}
	
	method(73) search_courses_latest(SearchCoursesLatestParam param) {
		list<CourseInfo> courses;
		bool result;
	}

	method(74) search_courses_posted_by(SearchCoursesPostedByParam param) {
		list<CourseInfo> courses;
		bool result;
	}

	method(75) search_courses_positive_rated_by(SearchCoursesPositiveRatedByParam param) {
		list<CourseInfo> courses;
	}

	method(76) search_courses_played_by(SearchCoursesPlayedByParam param) {
		list<CourseInfo> courses;
	}

	method(79) search_courses_endless_mode(SearchCoursesEndlessModeParam param) {
		list<CourseInfo> courses;
	}

	method(80) search_courses_first_clear(SearchCoursesFirstClearParam param) {
		list<CourseInfo> courses;
		bool result;
	}

	method(81) search_courses_best_time(SearchCoursesBestTimeParam param) {
		list<CourseInfo> courses;
		bool result;
	}
	
	method(85) get_courses_event(GetCoursesParam param, GetCoursesEventParam dummy) {
		list<EventCourseInfo> courses;
		list<result> results;
	}
	
	method(86) search_courses_event(SearchCoursesEventParam param) {
		list<EventCourseInfo> courses;
	}

	method(94) search_comments_in_order(SearchCommentsInOrderParam param) {
		list<CommentInfo> comments;
		bool result;
	}
	
	method(95) search_comments(uint64 data_id) {
		list<CommentInfo> comments;
	}

	method(103) get_death_positions(uint64 data_id) {
		list<DeathPositionInfo> positions;
	}
	
	method(131) get_user_or_course(GetUserOrCourseParam param) {
		UserInfo user;
		CourseInfo course;
	}
	
	method(134) get_req_get_info_headers_info(uint8 type) {
		ReqGetInfoHeadersInfo result;
	}
	
	method(153) get_event_course_stamp() {
		uint32 stamps;
	}
	
	method(154) get_event_course_status() {
		EventCourseStatusInfo info;
	}
	
	method(156) get_event_course_histogram(GetEventCourseHistogramParam param) {
		EventCourseHistogram histogram;
	}
	
	method(157) get_event_course_ghost(GetEventCourseGhostParam param) {
		list<EventCourseGhostInfo> ghosts;
	}

	method(160) get_world_map(GetWorldMapParam param) {
		list<WorldMapInfo> maps;
		list<result> results;
	}

	method(162) search_world_map_pick_up(SearchWorldMapPickUpParam param) {
		list<WorldMapInfo> maps;
	}
}
