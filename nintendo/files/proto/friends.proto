
// 3DS structures

struct AccountExtraInfo {
	uint64 unk1;
	uint32 unk2;
	string token;
}

struct FriendComment : Data {
	uint32 unk1;
	string comment;
	datetime unk2;
}

struct FriendKey {
	uint32 unk1;
	datetime unk2;
}

struct FriendMii : Data {
	pid pid;
	Mii mii;
	datetime unk1;
}

struct FriendMiiList : Data {
	uint32 unk1;
	MiiList mii;
	datetime unk2;
}

struct FriendPersistentInfo : Data {
	pid pid;
	uint8 region;
	uint8 country;
	uint8 area;
	uint8 language;
	uint8 platform;
	GameKey game_key;
	string message;
	datetime message_updated;
	datetime friended;
	datetime unk;
}

struct FriendPicture : Data {
	uint32 unk;
	buffer data;
	datetime datetime;
}

struct FriendPresence : Data {
	pid pid;
	NintendoPresence presence;
}

struct FriendRelationship : Data {
	pid pid;
	uint64 friend_code;
	uint8 is_complete;
}

struct GameKey : Data {
	uint64 title_id = 0;
	uint16 title_version = 0;
}

struct Mii : Data {
	string name;
	bool unk1;
	uint8 unk2;
	buffer mii_data;
}

struct MiiList : Data {
	string unk1;
	bool unk2;
	uint8 unk3;
	list<buffer> mii_datas;
}

struct MyProfile : Data {
	uint8 region;
	uint8 country;
	uint8 area;
	uint8 language;
	uint8 platform;
	uint64 unk1;
	string unk2;
	string unk3;
}

struct NintendoPresence : Data {
	uint32 changed_bit_flag;
	GameKey game_key;
	string game_mode_description;
	uint32 join_availability_flag;
	uint8 matchmake_system_type;
	uint32 join_game_id;
	uint32 join_game_mode;
	pid owner_pid;
	uint32 join_group_id;
	buffer application_data;
}

struct PlayedGame : Data {
	GameKey game_key;
	datetime datetime;
}


// Wii U structures

struct BlacklistedPrincipal : Data {
	PrincipalBasicInfo principal_info;
	GameKey game_key;
	datetime since;
}

struct Comment : Data {
	uint8 unk;
	string text;
	datetime changed;
}

struct FriendInfo : Data {
	NNAInfo nna_info;
	NintendoPresenceV2 presence;
	Comment comment;
	datetime befriended;
	datetime last_online;
	uint64 unk;
}

struct FriendRequest : Data {
	PrincipalBasicInfo principal_info;
	FriendRequestMessage message;
	datetime sent;
}

struct FriendRequestMessage : Data {
	uint64 unk1;
	uint8 unk2;
	uint8 unk3;
	string message;
	uint8 unk4;
	string string;
	GameKey game_key;
	datetime datetime;
	datetime expires;
}

struct MiiV2 : Data {
	string name;
	uint8 unk1 = 0;
	uint8 unk2 = 0;
	buffer data;
	datetime datetime = 0;
}

struct NNAInfo : Data {
	PrincipalBasicInfo principal_info;
	uint8 unk1 = 94;
	uint8 unk2 = 11;
}

struct NintendoCreateAccountData : Data {
	NNAInfo info;
	string token;
	datetime birthday;
	uint64 unk;
}

struct NintendoPresenceV2 : Data {
	uint32 flags = 0;
	bool is_online = false;
	GameKey game_key;
	uint8 unk1 = 0;
	string message = "";
	uint32 unk2 = 0;
	uint8 unk3 = 0;
	uint32 game_server_id = 0;
	uint32 unk4 = 0;
	uint32 pid = 0;
	uint32 gathering_id = 0;
	buffer application_data = "";
	uint8 unk5 = 3;
	uint8 unk6 = 3;
	uint8 unk7 = 3;
}

struct PersistentNotification : Data {
	uint64 unk1;
	uint32 unk2;
	uint32 unk3;
	uint32 unk4;
	string string;
}

struct PrincipalBasicInfo : Data {
	pid pid;
	string nnid;
	MiiV2 mii;
	uint8 unk = 2;
}

struct PrincipalPreference : Data {
	bool show_online_status;
	bool show_current_title;
	bool block_friend_requests;
}

struct PrincipalRequestBlockSetting : Data {
	uint32 unk1;
	bool unk2;
}

protocol Friends_V1 : 101 {
	method update_profile(MyProfile profile_data) {}
	method update_mii(Mii mii) {}
	method update_mii_list(MiiList mii_list) {}
	method update_played_games(list<PlayedGame> played_games) {}
	method update_preference(bool unk1, bool unk2, bool unk3) {}
	
	method get_friend_mii(list<FriendKey> friends) {
		list<FriendMii> miis;
	}
	method get_friend_mii_list(list<FriendKey> friends) {
		list<FriendMiiList> mii_lists;
	}
	
	method is_active_game(list<uint32> unk1, GameKey game_key) {
		list<uint32> unk;
	}
	
	method get_principal_id_by_local_friend_code(uint64 unk1, list<uint64> unk2) {
		list<FriendRelationship> friend_relationships;
	}

	method get_friend_relationships(list<pid> principal_ids) {
		list<FriendRelationship> friend_relationships;
	}

	method add_friend_by_principal_id(uint64 friend_seed, pid pid) {
		FriendRelationship friend_relationship;
	}
	
	method add_friend_by_principal_ids(uint64 unk, list<pid> pids) {
		list<FriendRelationship> friend_relationships;
	}
	
	method remove_friend_by_local_friend_code(uint64 friend_code) {}
	method remove_friend_by_principal_id(pid pid) {}

	method get_all_friends() {
		list<FriendRelationship> friend_relationships;
	}
	
	method update_black_list(list<uint32> unk) {}

	method sync_friend(uint64 friend_seed, list<pid> principal_ids, list<uint64> unk) {
		list<FriendRelationship> friend_list;
	}

	method update_presence(NintendoPresence presence_info, bool unk) {}
	method update_favorite_game_key(GameKey game_key) {}
	method update_comment(string comment) {}
	method update_picture(uint32 unk, buffer picture) {}

	method get_friend_presence(list<pid> principal_ids) {
		list<FriendPresence> friend_presence_list;
	}
	
	method get_friend_comment(list<FriendKey> friends) {
		list<FriendComment> comments;
	}

	method get_friend_picture(list<pid> principal_ids) {
		list<FriendPicture> friend_pictures;
	}

	method get_friend_persistent_info(list<pid> principal_ids) {
		list<FriendPersistentInfo> persistent_infos;
	}

	method send_invitation(list<uint32> unk) {}
}

protocol Friends_V2 : 102 {
	method update_and_get_all_information(NNAInfo nna_info, NintendoPresenceV2 presence, datetime birthday) {
		PrincipalPreference principal_preference;
		Comment comment;
		list<FriendInfo> friends;
		list<FriendRequest> sent_requests;
		list<FriendRequest> received_requests;
		list<BlacklistedPrincipal> blacklist;
		bool unk1;
		list<PersistentNotification> notifications;
		bool unk2;
	}
	
	method add_friend(pid pid) {
		FriendRequest request;
		FriendInfo info;
	}
	
	method add_friend_by_name(string name) {
		FriendRequest request;
		FriendInfo info;
	}
	
	method remove_friend(pid pid) {}
	
	method add_friend_request(
		uint32 unk1, uint8 unk2, string unk3, uint8 unk4,
		string unk5, GameKey game_key, datetime unk6
	) {
		FriendRequest request;
		FriendInfo info;
	}
	
	method cancel_friend_request(uint64 id) {}
	
	method accept_friend_request(uint64 id) {
		FriendInfo info;
	}
	
	method delete_friend_request(uint64 id) {}
	
	method deny_friend_request(uint64 id) {
		BlacklistedPrincipal blacklist;
	}
	
	method mark_friend_requests_as_received(list<uint64> ids) {}
	
	method add_black_list(BlacklistedPrincipal principal) {
		BlacklistedPrincipal principal;
	}
	
	method remove_black_list(pid pid) {}
	
	method update_presence(NintendoPresenceV2 presence) {}
	
	method update_mii(MiiV2 mii) {
		datetime unk;
	}
	
	method update_comment(Comment comment) {
		datetime unk;
	}
	
	method update_preference(PrincipalPreference preference) {}
	
	method get_basic_info(list<pid> pids) {
		list<PrincipalBasicInfo> info;
	}
	
	method delete_persistent_notification(list<PersistentNotification> notifications) {}
	
	method check_setting_status() {
		uint8 unk;
	}
	
	method get_request_block_settings(list<uint32> unk) {
		list<PrincipalRequestBlockSetting> settings;
	}
}
